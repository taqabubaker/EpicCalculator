// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace EpicCalculator.WebAppCodedUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddTwoPositiveNumbers - Use 'AddTwoPositiveNumbersParams' to pass parameters into this method.
        /// </summary>
        public void AddTwoPositiveNumbers()
        {
            #region Variable Declarations
            HtmlEdit uIFirstNumberEdit = this.UIEpicCalculatorHomePaWindow.UIStandardCalculatorEpDocument.UIFirstNumberEdit;
            HtmlComboBox uIOperationComboBox = this.UIEpicCalculatorHomePaWindow.UIStandardCalculatorEpDocument.UIOperationComboBox;
            HtmlEdit uISecondNumberEdit = this.UIEpicCalculatorHomePaWindow.UIStandardCalculatorEpDocument.UISecondNumberEdit;
            HtmlButton uICalculateButton = this.UIEpicCalculatorHomePaWindow.UIStandardCalculatorEpDocument.UIForm0Custom.UICalculateButton;
            #endregion

            // Type '15' in 'First Number' text box
            uIFirstNumberEdit.Text = this.AddTwoPositiveNumbersParams.UIFirstNumberEditText;

            // Select 'Add' in 'Operation' combo box
            uIOperationComboBox.SelectedItem = this.AddTwoPositiveNumbersParams.UIOperationComboBoxSelectedItem;

            // Type '5' in 'Second Number' text box
            uISecondNumberEdit.Text = this.AddTwoPositiveNumbersParams.UISecondNumberEditText;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(63, 17));
        }
        
        /// <summary>
        /// AssertAddTwoPositiveNumbers - Use 'AssertAddTwoPositiveNumbersExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAddTwoPositiveNumbers()
        {
            #region Variable Declarations
            HtmlEdit uIResultEdit = this.UIEpicCalculatorHomePaWindow.UIStandardCalculatorEpDocument.UIResultEdit;
            #endregion

            // Verify that the 'Exists' property of 'Result' text box equals 'True'
            Assert.AreEqual(this.AssertAddTwoPositiveNumbersExpectedValues.UIResultEditExists, uIResultEdit.Exists);

            // Verify that the 'Text' property of 'Result' text box equals '20'
            Assert.AreEqual(this.AssertAddTwoPositiveNumbersExpectedValues.UIResultEditText, uIResultEdit.Text);
        }
        
        /// <summary>
        /// AssertClearButton - Use 'AssertClearButtonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertClearButton()
        {
            #region Variable Declarations
            HtmlEdit uIFirstNumberEdit1 = this.UIEpicCalculatorHomePaWindow.UIStandardCalculatorEpDocument.UIFirstNumberEdit1;
            HtmlComboBox uIOperationComboBox1 = this.UIEpicCalculatorHomePaWindow.UIStandardCalculatorEpDocument.UIOperationComboBox1;
            HtmlEdit uISecondNumberEdit1 = this.UIEpicCalculatorHomePaWindow.UIStandardCalculatorEpDocument.UISecondNumberEdit1;
            HtmlEdit uIResultEdit = this.UIEpicCalculatorHomePaWindow.UIStandardCalculatorEpDocument.UIResultEdit;
            HtmlLabel uIResultLabel = this.UIEpicCalculatorHomePaWindow.UIStandardCalculatorEpDocument.UIResultPane.UIResultLabel;
            #endregion

            // Verify that the 'Text' property of 'First Number' text box equals ''
            Assert.AreEqual(this.AssertClearButtonExpectedValues.UIFirstNumberEdit1Text, uIFirstNumberEdit1.Text);

            // Verify that the 'SelectedItem' property of 'Operation' combo box equals '--Select Operation--'
            Assert.AreEqual(this.AssertClearButtonExpectedValues.UIOperationComboBox1SelectedItem, uIOperationComboBox1.SelectedItem);

            // Verify that the 'Text' property of 'Second Number' text box equals ''
            Assert.AreEqual(this.AssertClearButtonExpectedValues.UISecondNumberEdit1Text, uISecondNumberEdit1.Text);

            // Verify that the 'Exists' property of 'Result' text box equals 'False'
            Assert.AreEqual(this.AssertClearButtonExpectedValues.UIResultEditExists, uIResultEdit.Exists);

            // Verify that the 'Exists' property of 'Result' label equals 'False'
            Assert.AreEqual(this.AssertClearButtonExpectedValues.UIResultLabelExists, uIResultLabel.Exists);
        }
        
        /// <summary>
        /// Method to make sure that standard calculator loaded
        /// </summary>
        public void AssertStandardCalcShow()
        {
            #region Variable Declarations
            HtmlDiv uIStandardCalculatorFiPane = this.UIEpicCalculatorHomePaWindow.UIStandardCalculatorEpDocument.UIStandardCalculatorFiPane;
            #endregion

            uIStandardCalculatorFiPane.WaitForControlExist(5000);

            // Verify that the 'Exists' property of 'Standard Calculator First Number' pane equals 'True'
            Assert.AreEqual(this.AssertStandardCalcShowExpectedValues.UIStandardCalculatorFiPaneExists, uIStandardCalculatorFiPane.Exists, "Standard Calculator didn\'t show");
        }
        
        /// <summary>
        /// ClickOnClear
        /// </summary>
        public void ClickOnClear()
        {
            #region Variable Declarations
            HtmlButton uIClearButton = this.UIEpicCalculatorHomePaWindow.UIStandardCalculatorEpDocument.UIClearButton;
            #endregion

            // Click 'Clear' button
            Mouse.Click(uIClearButton, new Point(36, 18));
        }
        
        /// <summary>
        /// CloseBrowser
        /// </summary>
        public void CloseBrowser()
        {
            #region Variable Declarations
            BrowserWindow uIEpicCalculatorHomePaWindow = this.UIEpicCalculatorHomePaWindow;
            #endregion

            // Perform Close on Browser Window
            uIEpicCalculatorHomePaWindow.Close();
        }
        
        #region Properties
        public virtual AddTwoPositiveNumbersParams AddTwoPositiveNumbersParams
        {
            get
            {
                if ((this.mAddTwoPositiveNumbersParams == null))
                {
                    this.mAddTwoPositiveNumbersParams = new AddTwoPositiveNumbersParams();
                }
                return this.mAddTwoPositiveNumbersParams;
            }
        }
        
        public virtual AssertAddTwoPositiveNumbersExpectedValues AssertAddTwoPositiveNumbersExpectedValues
        {
            get
            {
                if ((this.mAssertAddTwoPositiveNumbersExpectedValues == null))
                {
                    this.mAssertAddTwoPositiveNumbersExpectedValues = new AssertAddTwoPositiveNumbersExpectedValues();
                }
                return this.mAssertAddTwoPositiveNumbersExpectedValues;
            }
        }
        
        public virtual AssertClearButtonExpectedValues AssertClearButtonExpectedValues
        {
            get
            {
                if ((this.mAssertClearButtonExpectedValues == null))
                {
                    this.mAssertClearButtonExpectedValues = new AssertClearButtonExpectedValues();
                }
                return this.mAssertClearButtonExpectedValues;
            }
        }
        
        public virtual AssertStandardCalcShowExpectedValues AssertStandardCalcShowExpectedValues
        {
            get
            {
                if ((this.mAssertStandardCalcShowExpectedValues == null))
                {
                    this.mAssertStandardCalcShowExpectedValues = new AssertStandardCalcShowExpectedValues();
                }
                return this.mAssertStandardCalcShowExpectedValues;
            }
        }
        
        public UIRunWindow UIRunWindow
        {
            get
            {
                if ((this.mUIRunWindow == null))
                {
                    this.mUIRunWindow = new UIRunWindow();
                }
                return this.mUIRunWindow;
            }
        }
        
        public UIEpicCalculatorHomePaWindow UIEpicCalculatorHomePaWindow
        {
            get
            {
                if ((this.mUIEpicCalculatorHomePaWindow == null))
                {
                    this.mUIEpicCalculatorHomePaWindow = new UIEpicCalculatorHomePaWindow();
                }
                return this.mUIEpicCalculatorHomePaWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddTwoPositiveNumbersParams mAddTwoPositiveNumbersParams;
        
        private AssertAddTwoPositiveNumbersExpectedValues mAssertAddTwoPositiveNumbersExpectedValues;
        
        private AssertClearButtonExpectedValues mAssertClearButtonExpectedValues;
        
        private AssertStandardCalcShowExpectedValues mAssertStandardCalcShowExpectedValues;
        
        private UIRunWindow mUIRunWindow;
        
        private UIEpicCalculatorHomePaWindow mUIEpicCalculatorHomePaWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddTwoPositiveNumbers'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddTwoPositiveNumbersParams
    {
        
        #region Fields
        /// <summary>
        /// Type '15' in 'First Number' text box
        /// </summary>
        public string UIFirstNumberEditText = "15";
        
        /// <summary>
        /// Select 'Add' in 'Operation' combo box
        /// </summary>
        public string UIOperationComboBoxSelectedItem = "Add";
        
        /// <summary>
        /// Type '5' in 'Second Number' text box
        /// </summary>
        public string UISecondNumberEditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAddTwoPositiveNumbers'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertAddTwoPositiveNumbersExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Result' text box equals 'True'
        /// </summary>
        public bool UIResultEditExists = true;
        
        /// <summary>
        /// Verify that the 'Text' property of 'Result' text box equals '20'
        /// </summary>
        public string UIResultEditText = "20";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertClearButton'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertClearButtonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'First Number' text box equals ''
        /// </summary>
        public string UIFirstNumberEdit1Text = "";
        
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'Operation' combo box equals '--Select Operation--'
        /// </summary>
        public string UIOperationComboBox1SelectedItem = "--Select Operation--";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Second Number' text box equals ''
        /// </summary>
        public string UISecondNumberEdit1Text = "";
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Result' text box equals 'False'
        /// </summary>
        public bool UIResultEditExists = false;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'Result' label equals 'False'
        /// </summary>
        public bool UIResultLabelExists = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertStandardCalcShow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertStandardCalcShowExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Standard Calculator First Number' pane equals 'True'
        /// </summary>
        public bool UIStandardCalculatorFiPaneExists = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRunWindow : WinWindow
    {
        
        public UIRunWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Run";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12298";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIOpenComboBox
        {
            get
            {
                if ((this.mUIOpenComboBox == null))
                {
                    this.mUIOpenComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIOpenComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Open:";
                    this.mUIOpenComboBox.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIOpenComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinEdit UIOpenEdit
        {
            get
            {
                if ((this.mUIOpenEdit == null))
                {
                    this.mUIOpenEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open:";
                    this.mUIOpenEdit.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIOpenEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEpicCalculatorHomePaWindow : BrowserWindow
    {
        
        public UIEpicCalculatorHomePaWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Epic Calculator - Home Page - Epic Calculator Application";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Epic Calculator - Home Page - Epic Calculator Application");
            this.WindowTitles.Add("Standard Calculator - Epic Calculator Application");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIEpicCalculatorHomePaDocument UIEpicCalculatorHomePaDocument
        {
            get
            {
                if ((this.mUIEpicCalculatorHomePaDocument == null))
                {
                    this.mUIEpicCalculatorHomePaDocument = new UIEpicCalculatorHomePaDocument(this);
                }
                return this.mUIEpicCalculatorHomePaDocument;
            }
        }
        
        public UIStandardCalculatorEpDocument UIStandardCalculatorEpDocument
        {
            get
            {
                if ((this.mUIStandardCalculatorEpDocument == null))
                {
                    this.mUIStandardCalculatorEpDocument = new UIStandardCalculatorEpDocument(this);
                }
                return this.mUIStandardCalculatorEpDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIEpicCalculatorHomePaDocument mUIEpicCalculatorHomePaDocument;
        
        private UIStandardCalculatorEpDocument mUIStandardCalculatorEpDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEpicCalculatorHomePaDocument : HtmlDocument
    {
        
        public UIEpicCalculatorHomePaDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Epic Calculator - Home Page - Epic Calculator Application";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://qaepiccalculator.azurewebsites.net/";
            this.WindowTitles.Add("Epic Calculator - Home Page - Epic Calculator Application");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIStandardCalculatorHyperlink
        {
            get
            {
                if ((this.mUIStandardCalculatorHyperlink == null))
                {
                    this.mUIStandardCalculatorHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIStandardCalculatorHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIStandardCalculatorHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIStandardCalculatorHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIStandardCalculatorHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Standard Calculator";
                    this.mUIStandardCalculatorHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/StandardCalculator";
                    this.mUIStandardCalculatorHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIStandardCalculatorHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://qaepiccalculator.azurewebsites.net/StandardCalculator";
                    this.mUIStandardCalculatorHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIStandardCalculatorHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/StandardCalculator\"";
                    this.mUIStandardCalculatorHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIStandardCalculatorHyperlink.WindowTitles.Add("Epic Calculator - Home Page - Epic Calculator Application");
                    #endregion
                }
                return this.mUIStandardCalculatorHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIStandardCalculatorHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStandardCalculatorEpDocument : HtmlDocument
    {
        
        public UIStandardCalculatorEpDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Standard Calculator - Epic Calculator Application";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/StandardCalculator";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://qaepiccalculator.azurewebsites.net/StandardCalculator";
            this.WindowTitles.Add("Standard Calculator - Epic Calculator Application");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIStandardCalculatorFiPane
        {
            get
            {
                if ((this.mUIStandardCalculatorFiPane == null))
                {
                    this.mUIStandardCalculatorFiPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIStandardCalculatorFiPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIStandardCalculatorFiPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIStandardCalculatorFiPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Standard Calculator\r\n\r\n\r\nFirst Number \r\n";
                    this.mUIStandardCalculatorFiPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIStandardCalculatorFiPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "container body-content";
                    this.mUIStandardCalculatorFiPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"container body-content\"";
                    this.mUIStandardCalculatorFiPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "5";
                    this.mUIStandardCalculatorFiPane.WindowTitles.Add("Standard Calculator - Epic Calculator Application");
                    #endregion
                }
                return this.mUIStandardCalculatorFiPane;
            }
        }
        
        public HtmlEdit UIFirstNumberEdit
        {
            get
            {
                if ((this.mUIFirstNumberEdit == null))
                {
                    this.mUIFirstNumberEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFirstNumberEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "FirstNum";
                    this.mUIFirstNumberEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "FirstNum";
                    this.mUIFirstNumberEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "First Number";
                    this.mUIFirstNumberEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFirstNumberEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFirstNumberEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control text-box single-line";
                    this.mUIFirstNumberEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"FirstNum\" class=\"form-control text";
                    this.mUIFirstNumberEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIFirstNumberEdit.WindowTitles.Add("Standard Calculator - Epic Calculator Application");
                    #endregion
                }
                return this.mUIFirstNumberEdit;
            }
        }
        
        public HtmlComboBox UIOperationComboBox
        {
            get
            {
                if ((this.mUIOperationComboBox == null))
                {
                    this.mUIOperationComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIOperationComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "OperationId";
                    this.mUIOperationComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "OperationId";
                    this.mUIOperationComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Operation";
                    this.mUIOperationComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIOperationComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIOperationComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "5";
                    this.mUIOperationComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = "form-control";
                    this.mUIOperationComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "name=\"OperationId\" class=\"form-control\" ";
                    this.mUIOperationComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    this.mUIOperationComboBox.WindowTitles.Add("Standard Calculator - Epic Calculator Application");
                    #endregion
                }
                return this.mUIOperationComboBox;
            }
        }
        
        public HtmlEdit UISecondNumberEdit
        {
            get
            {
                if ((this.mUISecondNumberEdit == null))
                {
                    this.mUISecondNumberEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISecondNumberEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondNum";
                    this.mUISecondNumberEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondNum";
                    this.mUISecondNumberEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Second Number";
                    this.mUISecondNumberEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISecondNumberEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISecondNumberEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control text-box single-line";
                    this.mUISecondNumberEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"SecondNum\" class=\"form-control tex";
                    this.mUISecondNumberEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUISecondNumberEdit.WindowTitles.Add("Standard Calculator - Epic Calculator Application");
                    #endregion
                }
                return this.mUISecondNumberEdit;
            }
        }
        
        public UIForm0Custom UIForm0Custom
        {
            get
            {
                if ((this.mUIForm0Custom == null))
                {
                    this.mUIForm0Custom = new UIForm0Custom(this);
                }
                return this.mUIForm0Custom;
            }
        }
        
        public HtmlEdit UIResultEdit
        {
            get
            {
                if ((this.mUIResultEdit == null))
                {
                    this.mUIResultEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIResultEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Result";
                    this.mUIResultEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Result";
                    this.mUIResultEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Result";
                    this.mUIResultEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIResultEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIResultEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control text-box single-line";
                    this.mUIResultEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Result\" disabled=\"\" class=\"form-co";
                    this.mUIResultEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIResultEdit.WindowTitles.Add("Standard Calculator - Epic Calculator Application");
                    #endregion
                }
                return this.mUIResultEdit;
            }
        }
        
        public HtmlButton UIClearButton
        {
            get
            {
                if ((this.mUIClearButton == null))
                {
                    this.mUIClearButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUIClearButton.SearchProperties[HtmlButton.PropertyNames.Id] = "btn-reset";
                    this.mUIClearButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIClearButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Clear";
                    this.mUIClearButton.SearchProperties[HtmlButton.PropertyNames.Type] = "reset";
                    this.mUIClearButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIClearButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUIClearButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" id=\"btn-reset\" t";
                    this.mUIClearButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUIClearButton.WindowTitles.Add("Standard Calculator - Epic Calculator Application");
                    #endregion
                }
                return this.mUIClearButton;
            }
        }
        
        public HtmlEdit UIFirstNumberEdit1
        {
            get
            {
                if ((this.mUIFirstNumberEdit1 == null))
                {
                    this.mUIFirstNumberEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFirstNumberEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "FirstNum";
                    this.mUIFirstNumberEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "FirstNum";
                    this.mUIFirstNumberEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "First Number";
                    this.mUIFirstNumberEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFirstNumberEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFirstNumberEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control text-box single-line valid";
                    this.mUIFirstNumberEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"FirstNum\" class=\"form-control text";
                    this.mUIFirstNumberEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIFirstNumberEdit1.WindowTitles.Add("Standard Calculator - Epic Calculator Application");
                    #endregion
                }
                return this.mUIFirstNumberEdit1;
            }
        }
        
        public HtmlComboBox UIOperationComboBox1
        {
            get
            {
                if ((this.mUIOperationComboBox1 == null))
                {
                    this.mUIOperationComboBox1 = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIOperationComboBox1.SearchProperties[HtmlComboBox.PropertyNames.Id] = "OperationId";
                    this.mUIOperationComboBox1.SearchProperties[HtmlComboBox.PropertyNames.Name] = "OperationId";
                    this.mUIOperationComboBox1.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Operation";
                    this.mUIOperationComboBox1.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIOperationComboBox1.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIOperationComboBox1.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "5";
                    this.mUIOperationComboBox1.FilterProperties[HtmlComboBox.PropertyNames.Class] = "form-control valid";
                    this.mUIOperationComboBox1.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "name=\"OperationId\" class=\"form-control v";
                    this.mUIOperationComboBox1.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    this.mUIOperationComboBox1.WindowTitles.Add("Standard Calculator - Epic Calculator Application");
                    #endregion
                }
                return this.mUIOperationComboBox1;
            }
        }
        
        public HtmlEdit UISecondNumberEdit1
        {
            get
            {
                if ((this.mUISecondNumberEdit1 == null))
                {
                    this.mUISecondNumberEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUISecondNumberEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "SecondNum";
                    this.mUISecondNumberEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "SecondNum";
                    this.mUISecondNumberEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Second Number";
                    this.mUISecondNumberEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUISecondNumberEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUISecondNumberEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control text-box single-line valid";
                    this.mUISecondNumberEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"SecondNum\" class=\"form-control tex";
                    this.mUISecondNumberEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUISecondNumberEdit1.WindowTitles.Add("Standard Calculator - Epic Calculator Application");
                    #endregion
                }
                return this.mUISecondNumberEdit1;
            }
        }
        
        public UIResultPane UIResultPane
        {
            get
            {
                if ((this.mUIResultPane == null))
                {
                    this.mUIResultPane = new UIResultPane(this);
                }
                return this.mUIResultPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIStandardCalculatorFiPane;
        
        private HtmlEdit mUIFirstNumberEdit;
        
        private HtmlComboBox mUIOperationComboBox;
        
        private HtmlEdit mUISecondNumberEdit;
        
        private UIForm0Custom mUIForm0Custom;
        
        private HtmlEdit mUIResultEdit;
        
        private HtmlButton mUIClearButton;
        
        private HtmlEdit mUIFirstNumberEdit1;
        
        private HtmlComboBox mUIOperationComboBox1;
        
        private HtmlEdit mUISecondNumberEdit1;
        
        private UIResultPane mUIResultPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIForm0Custom : HtmlCustom
    {
        
        public UIForm0Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "FORM";
            this.SearchProperties["Id"] = "form0";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.FilterProperties["Class"] = "form-horizontal";
            this.FilterProperties["ControlDefinition"] = "class=\"form-horizontal\" id=\"form0\" actio";
            this.FilterProperties["TagInstance"] = "1";
            this.WindowTitles.Add("Standard Calculator - Epic Calculator Application");
            #endregion
        }
        
        #region Properties
        public HtmlButton UICalculateButton
        {
            get
            {
                if ((this.mUICalculateButton == null))
                {
                    this.mUICalculateButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUICalculateButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUICalculateButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUICalculateButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Calculate";
                    this.mUICalculateButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUICalculateButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICalculateButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-primary";
                    this.mUICalculateButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-primary\" type=\"submit\"";
                    this.mUICalculateButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUICalculateButton.WindowTitles.Add("Standard Calculator - Epic Calculator Application");
                    #endregion
                }
                return this.mUICalculateButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlButton mUICalculateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIResultPane : HtmlDiv
    {
        
        public UIResultPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "div-result";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Result ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "form-group";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"form-group\" id=\"div-result\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "13";
            this.WindowTitles.Add("Standard Calculator - Epic Calculator Application");
            #endregion
        }
        
        #region Properties
        public HtmlLabel UIResultLabel
        {
            get
            {
                if ((this.mUIResultLabel == null))
                {
                    this.mUIResultLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIResultLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = null;
                    this.mUIResultLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIResultLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "Result";
                    this.mUIResultLabel.SearchProperties[HtmlLabel.PropertyNames.InnerText] = "Result";
                    this.mUIResultLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "control-label col-md-2";
                    this.mUIResultLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "class=\"control-label col-md-2\" for=\"Resu";
                    this.mUIResultLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "1";
                    this.mUIResultLabel.WindowTitles.Add("Standard Calculator - Epic Calculator Application");
                    #endregion
                }
                return this.mUIResultLabel;
            }
        }
        #endregion
        
        #region Fields
        private HtmlLabel mUIResultLabel;
        #endregion
    }
}
